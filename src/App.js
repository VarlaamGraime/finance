import React, { useState, useEffect } from 'react';

function App() {
  const [нормаЧасов, установитьНормуЧасов] = useState(167);
  const [оклад, установитьОклад] = useState(100000);
  const [массив1, установитьМассив1] = useState([ ]);
  const [массив2, установитьМассив2] = useState([ ]);
  const [результаты, установитьРезультаты] = useState(null);

  const рассчитатьИтоговуюЗП = () => {
    const новыеРезультаты = рассчитатьЗарплату(массив1, массив2, нормаЧасов, оклад);
    установитьРезультаты(новыеРезультаты);
  };
  const ценаЧаса = оклад / нормаЧасов;
  const ценаЧасаПереработки = ценаЧаса * 1.5; // Пусть переработка оплачивается с коэффициентом 1.5
  useEffect(() => {
    const новыеРезультаты = рассчитатьЗарплату(массив1, массив2, нормаЧасов, оклад);
    установитьРезультаты(новыеРезультаты);
  }, [массив1, массив2, нормаЧасов, оклад]);
  const handleInputChange = (event, setState) => {
    const { value } = event.target;
    const новыйМассив = value.split(',').map(Number);
    setState(Array.isArray(новыйМассив) ? новыйМассив : parseInt(value, 10));
  };


  return (
    <div className="App list">
      <label>
        Норма часов:
        <input type="number" value={нормаЧасов} onChange={(e) => handleInputChange(e, установитьНормуЧасов)} />
      </label>

      <label>
        Оклад:
        <input type="number" value={оклад} onChange={(e) => handleInputChange(e, установитьОклад)} />
      </label>

      <label>
        Дневные часы через запятую:
        <input type="text" value={массив1.join(',')} onChange={(e) => handleInputChange(e, установитьМассив1)} />
      </label>

      <label>
        Ночные часы через запятую:
        <input type="text" value={массив2.join(',')} onChange={(e) => handleInputChange(e, установитьМассив2)} />
      </label>

      <button onClick={рассчитатьИтоговуюЗП}>Рассчитать</button>

      {/* Вывод результатов */}
      {результаты && (
        <div>
          <p>Норма часов: {нормаЧасов}</p>
          {/* <p>Общее количество переработок: {результаты.количествоПереработок}</p> */}
          <p>Дневных в составе нормы (часов): {результаты.суммаПервогоМассива}</p>
          <p>Ночных в составе нормы (часов): {результаты.суммаИзВторогоМассива}</p>
          <p>Переработки день: {результаты.суммаОставшихсяЧасовМассив1}</p>
          <p>Переработки ночь: {результаты.суммаОставшихсяЧасовМассив2}</p>
          <p>Итого часов: {результаты.итого}</p>
          <p>Цена часа: {результаты.ценаЧаса}руб</p>
          <p>Цена часа переработки: {результаты.ценаЧасаПереработки}руб</p>
          <p>сумма за ночные в составе нормы (рублей): {результаты.суммаИзВторогоМассива*ценаЧаса*1.2 - (результаты.суммаИзВторогоМассива*ценаЧаса) }руб</p>
          <p>Переработки день: {результаты.суммаОставшихсяЧасовМассив1*ценаЧасаПереработки}руб</p>
          <p>Переработки ночь: {результаты.суммаОставшихсяЧасовМассив2*ценаЧасаПереработки*1.2} руб</p>
          <p>Итоговая сумма за переработки { Math.round(результаты.суммаОставшихсяЧасовМассив2*ценаЧасаПереработки*1.2+результаты.суммаОставшихсяЧасовМассив1*ценаЧасаПереработки+результаты.суммаИзВторогоМассива*ценаЧаса*1.2 - (результаты.суммаИзВторогоМассива*ценаЧаса) + (результаты.количествоПереработок*ценаЧаса))} руб (если прибавить ваш оклад, будет итоговая зп)</p>
          <p>Итоговая зп { Math.round(оклад+результаты.суммаОставшихсяЧасовМассив2*ценаЧасаПереработки*1.2+результаты.суммаОставшихсяЧасовМассив1*ценаЧасаПереработки+результаты.суммаИзВторогоМассива*ценаЧаса*1.2 - (результаты.суммаИзВторогоМассива*ценаЧаса) + (результаты.количествоПереработок*ценаЧаса))} руб</p>

        </div>
      )}
    </div>
  );
}

export default App;

function рассчитатьЗарплату(массив1, массив2, нормаЧасов, оклад) {
  let общаяСумма = 0;
  let суммаПервогоМассива = 0;
  let суммаИзВторогоМассива = 0;
  let оставшиеЧасыМассив1 = 0;
  let оставшиеЧасыМассив2 = 0;
  let суммаОставшихсяЧасовМассив1 = 0;
  let суммаОставшихсяЧасовМассив2 = 0;

  let i = 0;
  let j = 0;

  while (i < массив1.length || j < массив2.length) {
    if (i < массив1.length) {
      общаяСумма += массив1[i];
      суммаПервогоМассива += массив1[i];
      оставшиеЧасыМассив1 += массив1[i];
      i++;
    }

    if (общаяСумма >= нормаЧасов) {
      break;
    }

    if (j < массив2.length) {
      общаяСумма += массив2[j];
      суммаИзВторогоМассива += массив2[j];
      оставшиеЧасыМассив2 += массив2[j];
      j++;
    }

    if (общаяСумма >= нормаЧасов) {
      break;
    }
  }

  // Рассчитываем суммы оставшихся часов после набора нормы
  суммаОставшихсяЧасовМассив1 = массив1.slice(i).reduce((acc, curr) => acc + curr, 0);
  суммаОставшихсяЧасовМассив2 = массив2.slice(j).reduce((acc, curr) => acc + curr, 0);

  const итого = массив1.concat(массив2).reduce((acc, curr) => acc + curr, 0);
  const оставшаяСумма = Math.max(0, общаяСумма - нормаЧасов);
  const количествоПереработок = оставшаяСумма;

  const ценаЧаса = оклад / нормаЧасов;
  const ценаЧасаПереработки = ценаЧаса * 1.5; // Пусть переработка оплачивается с коэффициентом 1.5

  return {
    общаяСумма,
    суммаПервогоМассива,
    суммаИзВторогоМассива,
    оставшаяСумма,
    количествоПереработок,
    итого,
    ценаЧаса,
    ценаЧасаПереработки,
    оставшиеЧасыМассив1,
    оставшиеЧасыМассив2,
    суммаОставшихсяЧасовМассив1,
    суммаОставшихсяЧасовМассив2
  };
}
