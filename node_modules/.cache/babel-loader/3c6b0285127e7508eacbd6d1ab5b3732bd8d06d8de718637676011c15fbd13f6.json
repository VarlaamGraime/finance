{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u0410\\u043B\\u0435\\u043A\\u0441\\u0430\\u043D\\u0434\\u0440\\\\Documents\\\\finance\\\\finance\\\\src\\\\App.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [inputValue1, setInputValue1] = useState('');\n  const [inputValue2, setInputValue2] = useState('');\n  const [dataArray, setDataArray] = useState([]);\n  function РеактивныйКомпонент() {\n    _s();\n    const [нормаЧасов, установитьНормуЧасов] = useState(167);\n    const [оклад, установитьОклад] = useState(100000);\n    const [массив1, установитьМассив1] = useState([9, 8, 8, 7, 4, 8, 12, 15, 4, 3, 9, 5, 4, 9, 9, 2, 7, 14, 8, 11, 3, 13, 12, 7, 9]);\n    const [массив2, установитьМассив2] = useState([6, 7, 7, 2, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 0, 7, 4, 7, 5, 6, 4, 6, 4, 6, 7]);\n    const рассчитатьИтоговуюЗП = () => {\n      // Ваш рассчетный код, который использует введенные значения\n      // Замените результат этой функции на ваш рассчет\n      return {\n        округленнаяДневныеПереработки: 0,\n        округленныеНочныеПереработки: 0,\n        округленныеНочныеВоВремяНормыЧасов: 0,\n        округленнаяИтоговаяЗП: 0\n      };\n    };\n    const handleInputChange = (event, setState) => {\n      const {\n        value\n      } = event.target;\n      setState(value);\n    };\n    const addToArray = () => {\n      // Проверка на пустые значения\n      if (inputValue1.trim() === '' || inputValue2.trim() === '') {\n        alert('Введите данные перед добавлением в массив.');\n        return;\n      }\n\n      // Создание нового массива, содержащего текущие значения из обоих инпутов\n      const newArray = [inputValue1, inputValue2];\n\n      // Добавление текущих значений в массив данных\n      setDataArray(newArray);\n\n      // Очистка инпутов после добавления в массив\n      setInputValue1('');\n      setInputValue2('');\n\n      // Вывод для демонстрации\n      console.log('Массив после добавления:', newArray);\n    };\n    function суммаДоЗначения(массив1, массив2, нормаЧасов) {\n      let общаяСумма = 0;\n      let достигнута = -1;\n      let суммаПервогоМассива = 0;\n      let суммаИзВторогоМассива = 0;\n      let maxLength = Math.min(массив1.length, массив2.length);\n      for (let i = 0; i < maxLength; i++) {\n        общаяСумма += массив1[i] + массив2[i];\n        суммаПервогоМассива += массив1[i];\n        суммаИзВторогоМассива += массив2[i];\n        if (общаяСумма >= нормаЧасов) {\n          достигнута = i + 1;\n          break;\n        }\n      }\n      const оставшаяСумма = общаяСумма - нормаЧасов;\n      return {\n        общаяСумма,\n        достигнута,\n        суммаПервогоМассива,\n        суммаИзВторогоМассива,\n        оставшаяСумма\n      };\n    }\n\n    // Ваши массивы данных\n    // const массив1 = [9, 8, 8, 7, 4, 8, 12, 15, 4, 3, 9, 5, 4, 9, 9, 2, 7, 14, 8, 11, 3, 13, 12, 7, 9];\n    // const массив2 = [6, 7, 7, 2, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 0, 7, 4, 7, 5, 6, 4, 6, 4, 6, 7];\n\n    // const нормаЧасов = 167;\n\n    // const суммаОклада = 100000;\n\n    const результат = суммаДоЗначения(массив1, массив2, нормаЧасов);\n    console.log(`Норма часов: ${нормаЧасов}`);\n    console.log(`Количество переработок: ${результат.общаяСумма}`);\n    if (результат.достигнута !== -1) {\n      console.log(`Достигнута норма часов: ${результат.достигнута}`);\n      console.log(`Дневные переработки (часов): ${результат.суммаПервогоМассива}`);\n      console.log(`Ночные переработки (часов): ${результат.суммаИзВторогоМассива}`);\n      console.log(`Оставшееся время: ${результат.оставшаяСумма}`);\n\n      // Рассчитываем цену за час\n      const ценаЗаЧас = оклад / нормаЧасов;\n      console.log(`Цена за час: ${ценаЗаЧас}`);\n\n      // Рассчитываем цену переработки (умножаем цену за час на 1.5)\n      const ценаПереработки = ценаЗаЧас * 1.5;\n      console.log(`Цена переработки: ${ценаПереработки}`);\n\n      // Рассчитываем дневные переработки (умножаем цену переработки на дневные переработки и вычитаем 13%)\n      const дневныеПереработки = ценаПереработки * результат.суммаПервогоМассива * 0.87;\n      console.log(`Дневные переработки: ${дневныеПереработки}`);\n\n      // Рассчитываем ночные переработки (умножаем цену переработки на ночные переработки, прибавляем 20%, и вычитаем 13%)\n      const ночныеПереработки = ценаПереработки * (результат.суммаИзВторогоМассива * 1.2) * 0.87;\n      console.log(`Ночные переработки: ${ночныеПереработки}`);\n\n      // Рассчитываем величину 20% от суммы из второго массива до достижения нормы часов\n      const ночныеВоВремяНормыЧасов = результат.суммаИзВторогоМассива * ценаЗаЧас * 0.2;\n      console.log(`Ночные во время нормы часов: ${ночныеВоВремяНормыЧасов}`);\n\n      // Рассчитываем итоговую зарплату (дневные переработки + ночные переработки + 20% от суммы из второго массива + 100000)\n      const итоговаяЗП = дневныеПереработки + ночныеПереработки + ночныеВоВремяНормыЧасов + 100000;\n\n      // Округляем значения до целых чисел\n      const округленнаяДневныеПереработки = Math.round(дневныеПереработки);\n      const округленныеНочныеПереработки = Math.round(ночныеПереработки);\n      const округленныеНочныеВоВремяНормыЧасов = Math.round(ночныеВоВремяНормыЧасов);\n      const округленнаяИтоговаяЗП = Math.round(итоговаяЗП);\n      console.log(`Округленные дневные переработки: ${округленнаяДневныеПереработки}`);\n      console.log(`Округленные ночные переработки: ${округленныеНочныеПереработки}`);\n      console.log(`Округленные ночные во время нормы часов: ${округленныеНочныеВоВремяНормыЧасов}`);\n      console.log(`Округленная итоговая зарплата: ${округленнаяИтоговаяЗП}`);\n    } else {\n      console.log('Не удалось достичь нормы часов.');\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"\\u041D\\u043E\\u0440\\u043C\\u0430 \\u0447\\u0430\\u0441\\u043E\\u0432:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: нормаЧасов,\n          onChange: e => handleInputChange(e, установитьНормуЧасов)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"\\u041E\\u043A\\u043B\\u0430\\u0434:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: оклад,\n          onChange: e => handleInputChange(e, установитьОклад)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"\\u041C\\u0430\\u0441\\u0441\\u0438\\u0432 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 1:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: массив1.join(','),\n          onChange: e => handleInputChange(e, установитьМассив1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"\\u041C\\u0430\\u0441\\u0441\\u0438\\u0432 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 2:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: массив2.join(','),\n          onChange: e => handleInputChange(e, установитьМассив2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: рассчитатьИтоговуюЗП,\n        children: \"\\u0420\\u0430\\u0441\\u0441\\u0447\\u0438\\u0442\\u0430\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }, this);\n  }\n  _s(РеактивныйКомпонент, \"5BI+o3P2Ea4Y6Rgjhx+3rIVXU5w=\");\n}\n_s2(App, \"8GZgHrIa8awP99+7iGcfqdvYmkk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s2","_s","$RefreshSig$","inputValue1","setInputValue1","inputValue2","setInputValue2","dataArray","setDataArray","РеактивныйКомпонент","нормаЧасов","установитьНормуЧасов","оклад","установитьОклад","массив1","установитьМассив1","массив2","установитьМассив2","рассчитатьИтоговуюЗП","округленнаяДневныеПереработки","округленныеНочныеПереработки","округленныеНочныеВоВремяНормыЧасов","округленнаяИтоговаяЗП","handleInputChange","event","setState","value","target","addToArray","trim","alert","newArray","console","log","суммаДоЗначения","общаяСумма","достигнута","суммаПервогоМассива","суммаИзВторогоМассива","maxLength","Math","min","length","i","оставшаяСумма","результат","ценаЗаЧас","ценаПереработки","дневныеПереработки","ночныеПереработки","ночныеВоВремяНормыЧасов","итоговаяЗП","round","className","children","type","onChange","e","fileName","_jsxFileName","lineNumber","columnNumber","join","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Александр/Documents/finance/finance/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\n\nfunction App() {\n  const [inputValue1, setInputValue1] = useState('');\n  const [inputValue2, setInputValue2] = useState('');\n  const [dataArray, setDataArray] = useState([]);\n  function РеактивныйКомпонент() {\n    const [нормаЧасов, установитьНормуЧасов] = useState(167);\n    const [оклад, установитьОклад] = useState(100000);\n    const [массив1, установитьМассив1] = useState([9, 8, 8, 7, 4, 8, 12, 15, 4, 3, 9, 5, 4, 9, 9, 2, 7, 14, 8, 11, 3, 13, 12, 7, 9]);\n    const [массив2, установитьМассив2] = useState([6, 7, 7, 2, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 0, 7, 4, 7, 5, 6, 4, 6, 4, 6, 7]);\n  \n    const рассчитатьИтоговуюЗП = () => {\n      // Ваш рассчетный код, который использует введенные значения\n      // Замените результат этой функции на ваш рассчет\n      return {\n        округленнаяДневныеПереработки: 0,\n        округленныеНочныеПереработки: 0,\n        округленныеНочныеВоВремяНормыЧасов: 0,\n        округленнаяИтоговаяЗП: 0\n      };\n    };\n  \n    const handleInputChange = (event, setState) => {\n      const { value } = event.target;\n      setState(value);\n    };\n  const addToArray = () => {\n    // Проверка на пустые значения\n    if (inputValue1.trim() === '' || inputValue2.trim() === '') {\n      alert('Введите данные перед добавлением в массив.');\n      return;\n    }\n\n    // Создание нового массива, содержащего текущие значения из обоих инпутов\n    const newArray = [inputValue1, inputValue2];\n\n    // Добавление текущих значений в массив данных\n    setDataArray(newArray);\n\n    // Очистка инпутов после добавления в массив\n    setInputValue1('');\n    setInputValue2('');\n\n    // Вывод для демонстрации\n    console.log('Массив после добавления:', newArray);\n  };\nfunction суммаДоЗначения(массив1, массив2, нормаЧасов) {\n  let общаяСумма = 0;\n  let достигнута = -1;\n  let суммаПервогоМассива = 0;\n  let суммаИзВторогоМассива = 0;\n\n  let maxLength = Math.min(массив1.length, массив2.length);\n\n  for (let i = 0; i < maxLength; i++) {\n      общаяСумма += массив1[i] + массив2[i];\n      суммаПервогоМассива += массив1[i];\n      суммаИзВторогоМассива += массив2[i];\n\n      if (общаяСумма >= нормаЧасов) {\n          достигнута = i + 1;\n          break;\n      }\n  }\n\n  const оставшаяСумма = общаяСумма - нормаЧасов;\n\n  return {\n      общаяСумма,\n      достигнута,\n      суммаПервогоМассива,\n      суммаИзВторогоМассива,\n      оставшаяСумма\n  };\n}\n\n// Ваши массивы данных\n// const массив1 = [9, 8, 8, 7, 4, 8, 12, 15, 4, 3, 9, 5, 4, 9, 9, 2, 7, 14, 8, 11, 3, 13, 12, 7, 9];\n// const массив2 = [6, 7, 7, 2, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 0, 7, 4, 7, 5, 6, 4, 6, 4, 6, 7];\n\n// const нормаЧасов = 167;\n\n// const суммаОклада = 100000;\n\n\nconst результат = суммаДоЗначения(массив1, массив2, нормаЧасов);\n\nconsole.log(`Норма часов: ${нормаЧасов}`);\nconsole.log(`Количество переработок: ${результат.общаяСумма}`);\n\nif (результат.достигнута !== -1) {\n  console.log(`Достигнута норма часов: ${результат.достигнута}`);\n  console.log(`Дневные переработки (часов): ${результат.суммаПервогоМассива}`);\n  console.log(`Ночные переработки (часов): ${результат.суммаИзВторогоМассива}`);\n  console.log(`Оставшееся время: ${результат.оставшаяСумма}`);\n\n  // Рассчитываем цену за час\n  const ценаЗаЧас = оклад / нормаЧасов;\n  console.log(`Цена за час: ${ценаЗаЧас}`);\n\n  // Рассчитываем цену переработки (умножаем цену за час на 1.5)\n  const ценаПереработки = ценаЗаЧас * 1.5;\n  console.log(`Цена переработки: ${ценаПереработки}`);\n\n  // Рассчитываем дневные переработки (умножаем цену переработки на дневные переработки и вычитаем 13%)\n  const дневныеПереработки = ценаПереработки * результат.суммаПервогоМассива * 0.87;\n  console.log(`Дневные переработки: ${дневныеПереработки}`);\n\n  // Рассчитываем ночные переработки (умножаем цену переработки на ночные переработки, прибавляем 20%, и вычитаем 13%)\n  const ночныеПереработки = ценаПереработки * (результат.суммаИзВторогоМассива * 1.2) * 0.87;\n  console.log(`Ночные переработки: ${ночныеПереработки}`);\n\n  // Рассчитываем величину 20% от суммы из второго массива до достижения нормы часов\n  const ночныеВоВремяНормыЧасов = результат.суммаИзВторогоМассива * ценаЗаЧас * 0.2;\n  console.log(`Ночные во время нормы часов: ${ночныеВоВремяНормыЧасов}`);\n\n  // Рассчитываем итоговую зарплату (дневные переработки + ночные переработки + 20% от суммы из второго массива + 100000)\n  const итоговаяЗП = дневныеПереработки + ночныеПереработки + ночныеВоВремяНормыЧасов + 100000;\n\n  // Округляем значения до целых чисел\n  const округленнаяДневныеПереработки = Math.round(дневныеПереработки);\n  const округленныеНочныеПереработки = Math.round(ночныеПереработки);\n  const округленныеНочныеВоВремяНормыЧасов = Math.round(ночныеВоВремяНормыЧасов);\n  const округленнаяИтоговаяЗП = Math.round(итоговаяЗП);\n\n  console.log(`Округленные дневные переработки: ${округленнаяДневныеПереработки}`);\n  console.log(`Округленные ночные переработки: ${округленныеНочныеПереработки}`);\n  console.log(`Округленные ночные во время нормы часов: ${округленныеНочныеВоВремяНормыЧасов}`);\n  console.log(`Округленная итоговая зарплата: ${округленнаяИтоговаяЗП}`);\n} else {\n  console.log('Не удалось достичь нормы часов.');\n}\n\n\n\n  \n  return (\n\n    <div className=\"App\">\n         <label>\n        Норма часов:\n        <input type=\"number\" value={нормаЧасов} onChange={(e) => handleInputChange(e, установитьНормуЧасов)} />\n      </label>\n\n      <label>\n        Оклад:\n        <input type=\"number\" value={оклад} onChange={(e) => handleInputChange(e, установитьОклад)} />\n      </label>\n\n      <label>\n        Массив данных 1:\n        <input type=\"text\" value={массив1.join(',')} onChange={(e) => handleInputChange(e, установитьМассив1)} />\n      </label>\n\n      <label>\n        Массив данных 2:\n        <input type=\"text\" value={массив2.join(',')} onChange={(e) => handleInputChange(e, установитьМассив2)} />\n      </label>\n\n      <button onClick={рассчитатьИтоговуюЗП}>Рассчитать</button>\n    </div>\n  );\n}\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}