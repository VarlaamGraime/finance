{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u0410\\u043B\\u0435\\u043A\\u0441\\u0430\\u043D\\u0434\\u0440\\\\Documents\\\\finance\\\\finance\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [нормаЧасов, установитьНормуЧасов] = useState(167);\n  const [оклад, установитьОклад] = useState(100000);\n  const [массив1, установитьМассив1] = useState([9, 8, 8, 7, 4, 8, 12, 15, 4, 3, 9, 5, 4, 9, 9, 2, 7, 14, 8, 11, 3, 13, 12, 7, 9]);\n  const [массив2, установитьМассив2] = useState([6, 7, 7, 2, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 0, 7, 4, 7, 5, 6, 4, 6, 4, 6, 7]);\n  const рассчитатьИтоговуюЗП = () => {\n    // Ваш рассчетный код, который использует введенные значения\n    // Замените результат этой функции на ваш рассчет\n    return {\n      округленнаяДневныеПереработки: 0,\n      округленныеНочныеПереработки: 0,\n      округленныеНочныеВоВремяНормыЧасов: 0,\n      округленнаяИтоговаяЗП: 0\n    };\n  };\n  const handleInputChange = (event, setState) => {\n    const {\n      value\n    } = event.target;\n    setState(value);\n  };\n  const addToArray = () => {\n    // Проверка на пустые значения\n    if (inputValue1.trim() === '' || inputValue2.trim() === '') {\n      alert('Введите данные перед добавлением в массив.');\n      return;\n    }\n\n    // Создание нового массива, содержащего текущие значения из обоих инпутов\n    const newArray = [inputValue1, inputValue2];\n\n    // Добавление текущих значений в массив данных\n    setDataArray(newArray);\n\n    // Очистка инпутов после добавления в массив\n    setInputValue1('');\n    setInputValue2('');\n\n    // Вывод для демонстрации\n    console.log('Массив после добавления:', newArray);\n  };\n  function суммаДоЗначения(массив1, массив2, нормаЧасов) {\n    let общаяСумма = 0;\n    let достигнута = -1;\n    let суммаПервогоМассива = 0;\n    let суммаИзВторогоМассива = 0;\n    let maxLength = Math.min(массив1.length, массив2.length);\n    for (let i = 0; i < maxLength; i++) {\n      общаяСумма += массив1[i] + массив2[i];\n      суммаПервогоМассива += массив1[i];\n      суммаИзВторогоМассива += массив2[i];\n      if (общаяСумма >= нормаЧасов) {\n        достигнута = i + 1;\n        break;\n      }\n    }\n    const оставшаяСумма = общаяСумма - нормаЧасов;\n    return {\n      общаяСумма,\n      достигнута,\n      суммаПервогоМассива,\n      суммаИзВторогоМассива,\n      оставшаяСумма\n    };\n  }\n\n  // Ваши массивы данных\n  // const массив1 = [9, 8, 8, 7, 4, 8, 12, 15, 4, 3, 9, 5, 4, 9, 9, 2, 7, 14, 8, 11, 3, 13, 12, 7, 9];\n  // const массив2 = [6, 7, 7, 2, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 0, 7, 4, 7, 5, 6, 4, 6, 4, 6, 7];\n\n  // const нормаЧасов = 167;\n\n  // const суммаОклада = 100000;\n\n  const результат = суммаДоЗначения(массив1, массив2, нормаЧасов);\n  console.log(`Норма часов: ${нормаЧасов}`);\n  console.log(`Количество переработок: ${результат.общаяСумма}`);\n  if (результат.достигнута !== -1) {\n    console.log(`Достигнута норма часов: ${результат.достигнута}`);\n    console.log(`Дневные переработки (часов): ${результат.суммаПервогоМассива}`);\n    console.log(`Ночные переработки (часов): ${результат.суммаИзВторогоМассива}`);\n    console.log(`Оставшееся время: ${результат.оставшаяСумма}`);\n\n    // Рассчитываем цену за час\n    const ценаЗаЧас = оклад / нормаЧасов;\n    console.log(`Цена за час: ${ценаЗаЧас}`);\n\n    // Рассчитываем цену переработки (умножаем цену за час на 1.5)\n    const ценаПереработки = ценаЗаЧас * 1.5;\n    console.log(`Цена переработки: ${ценаПереработки}`);\n\n    // Рассчитываем дневные переработки (умножаем цену переработки на дневные переработки и вычитаем 13%)\n    const дневныеПереработки = ценаПереработки * результат.суммаПервогоМассива * 0.87;\n    console.log(`Дневные переработки: ${дневныеПереработки}`);\n\n    // Рассчитываем ночные переработки (умножаем цену переработки на ночные переработки, прибавляем 20%, и вычитаем 13%)\n    const ночныеПереработки = ценаПереработки * (результат.суммаИзВторогоМассива * 1.2) * 0.87;\n    console.log(`Ночные переработки: ${ночныеПереработки}`);\n\n    // Рассчитываем величину 20% от суммы из второго массива до достижения нормы часов\n    const ночныеВоВремяНормыЧасов = результат.суммаИзВторогоМассива * ценаЗаЧас * 0.2;\n    console.log(`Ночные во время нормы часов: ${ночныеВоВремяНормыЧасов}`);\n\n    // Рассчитываем итоговую зарплату (дневные переработки + ночные переработки + 20% от суммы из второго массива + 100000)\n    const итоговаяЗП = дневныеПереработки + ночныеПереработки + ночныеВоВремяНормыЧасов + 100000;\n\n    // Округляем значения до целых чисел\n    const округленнаяДневныеПереработки = Math.round(дневныеПереработки);\n    const округленныеНочныеПереработки = Math.round(ночныеПереработки);\n    const округленныеНочныеВоВремяНормыЧасов = Math.round(ночныеВоВремяНормыЧасов);\n    const округленнаяИтоговаяЗП = Math.round(итоговаяЗП);\n    console.log(`Округленные дневные переработки: ${округленнаяДневныеПереработки}`);\n    console.log(`Округленные ночные переработки: ${округленныеНочныеПереработки}`);\n    console.log(`Округленные ночные во время нормы часов: ${округленныеНочныеВоВремяНормыЧасов}`);\n    console.log(`Округленная итоговая зарплата: ${округленнаяИтоговаяЗП}`);\n  } else {\n    console.log('Не удалось достичь нормы часов.');\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"\\u041D\\u043E\\u0440\\u043C\\u0430 \\u0447\\u0430\\u0441\\u043E\\u0432:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: нормаЧасов,\n        onChange: e => handleInputChange(e, установитьНормуЧасов)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"\\u041E\\u043A\\u043B\\u0430\\u0434:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: оклад,\n        onChange: e => handleInputChange(e, установитьОклад)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"\\u041C\\u0430\\u0441\\u0441\\u0438\\u0432 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 1:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: массив1.join(','),\n        onChange: e => handleInputChange(e, установитьМассив1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"\\u041C\\u0430\\u0441\\u0441\\u0438\\u0432 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 2:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: массив2.join(','),\n        onChange: e => handleInputChange(e, установитьМассив2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: рассчитатьИтоговуюЗП,\n      children: \"\\u0420\\u0430\\u0441\\u0441\\u0447\\u0438\\u0442\\u0430\\u0442\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5BI+o3P2Ea4Y6Rgjhx+3rIVXU5w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","нормаЧасов","установитьНормуЧасов","оклад","установитьОклад","массив1","установитьМассив1","массив2","установитьМассив2","рассчитатьИтоговуюЗП","округленнаяДневныеПереработки","округленныеНочныеПереработки","округленныеНочныеВоВремяНормыЧасов","округленнаяИтоговаяЗП","handleInputChange","event","setState","value","target","addToArray","inputValue1","trim","inputValue2","alert","newArray","setDataArray","setInputValue1","setInputValue2","console","log","суммаДоЗначения","общаяСумма","достигнута","суммаПервогоМассива","суммаИзВторогоМассива","maxLength","Math","min","length","i","оставшаяСумма","результат","ценаЗаЧас","ценаПереработки","дневныеПереработки","ночныеПереработки","ночныеВоВремяНормыЧасов","итоговаяЗП","round","className","children","type","onChange","e","fileName","_jsxFileName","lineNumber","columnNumber","join","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Александр/Documents/finance/finance/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\n\nfunction App() {\n  const [нормаЧасов, установитьНормуЧасов] = useState(167);\n  const [оклад, установитьОклад] = useState(100000);\n  const [массив1, установитьМассив1] = useState([9, 8, 8, 7, 4, 8, 12, 15, 4, 3, 9, 5, 4, 9, 9, 2, 7, 14, 8, 11, 3, 13, 12, 7, 9]);\n  const [массив2, установитьМассив2] = useState([6, 7, 7, 2, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 0, 7, 4, 7, 5, 6, 4, 6, 4, 6, 7]);\n\n    const рассчитатьИтоговуюЗП = () => {\n      // Ваш рассчетный код, который использует введенные значения\n      // Замените результат этой функции на ваш рассчет\n      return {\n        округленнаяДневныеПереработки: 0,\n        округленныеНочныеПереработки: 0,\n        округленныеНочныеВоВремяНормыЧасов: 0,\n        округленнаяИтоговаяЗП: 0\n      };\n    };\n  \n    const handleInputChange = (event, setState) => {\n      const { value } = event.target;\n      setState(value);\n    };\n  const addToArray = () => {\n    // Проверка на пустые значения\n    if (inputValue1.trim() === '' || inputValue2.trim() === '') {\n      alert('Введите данные перед добавлением в массив.');\n      return;\n    }\n\n    // Создание нового массива, содержащего текущие значения из обоих инпутов\n    const newArray = [inputValue1, inputValue2];\n\n    // Добавление текущих значений в массив данных\n    setDataArray(newArray);\n\n    // Очистка инпутов после добавления в массив\n    setInputValue1('');\n    setInputValue2('');\n\n    // Вывод для демонстрации\n    console.log('Массив после добавления:', newArray);\n  };\nfunction суммаДоЗначения(массив1, массив2, нормаЧасов) {\n  let общаяСумма = 0;\n  let достигнута = -1;\n  let суммаПервогоМассива = 0;\n  let суммаИзВторогоМассива = 0;\n\n  let maxLength = Math.min(массив1.length, массив2.length);\n\n  for (let i = 0; i < maxLength; i++) {\n      общаяСумма += массив1[i] + массив2[i];\n      суммаПервогоМассива += массив1[i];\n      суммаИзВторогоМассива += массив2[i];\n\n      if (общаяСумма >= нормаЧасов) {\n          достигнута = i + 1;\n          break;\n      }\n  }\n\n  const оставшаяСумма = общаяСумма - нормаЧасов;\n\n  return {\n      общаяСумма,\n      достигнута,\n      суммаПервогоМассива,\n      суммаИзВторогоМассива,\n      оставшаяСумма\n  };\n}\n\n// Ваши массивы данных\n// const массив1 = [9, 8, 8, 7, 4, 8, 12, 15, 4, 3, 9, 5, 4, 9, 9, 2, 7, 14, 8, 11, 3, 13, 12, 7, 9];\n// const массив2 = [6, 7, 7, 2, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 0, 7, 4, 7, 5, 6, 4, 6, 4, 6, 7];\n\n// const нормаЧасов = 167;\n\n// const суммаОклада = 100000;\n\n\nconst результат = суммаДоЗначения(массив1, массив2, нормаЧасов);\n\nconsole.log(`Норма часов: ${нормаЧасов}`);\nconsole.log(`Количество переработок: ${результат.общаяСумма}`);\n\nif (результат.достигнута !== -1) {\n  console.log(`Достигнута норма часов: ${результат.достигнута}`);\n  console.log(`Дневные переработки (часов): ${результат.суммаПервогоМассива}`);\n  console.log(`Ночные переработки (часов): ${результат.суммаИзВторогоМассива}`);\n  console.log(`Оставшееся время: ${результат.оставшаяСумма}`);\n\n  // Рассчитываем цену за час\n  const ценаЗаЧас = оклад / нормаЧасов;\n  console.log(`Цена за час: ${ценаЗаЧас}`);\n\n  // Рассчитываем цену переработки (умножаем цену за час на 1.5)\n  const ценаПереработки = ценаЗаЧас * 1.5;\n  console.log(`Цена переработки: ${ценаПереработки}`);\n\n  // Рассчитываем дневные переработки (умножаем цену переработки на дневные переработки и вычитаем 13%)\n  const дневныеПереработки = ценаПереработки * результат.суммаПервогоМассива * 0.87;\n  console.log(`Дневные переработки: ${дневныеПереработки}`);\n\n  // Рассчитываем ночные переработки (умножаем цену переработки на ночные переработки, прибавляем 20%, и вычитаем 13%)\n  const ночныеПереработки = ценаПереработки * (результат.суммаИзВторогоМассива * 1.2) * 0.87;\n  console.log(`Ночные переработки: ${ночныеПереработки}`);\n\n  // Рассчитываем величину 20% от суммы из второго массива до достижения нормы часов\n  const ночныеВоВремяНормыЧасов = результат.суммаИзВторогоМассива * ценаЗаЧас * 0.2;\n  console.log(`Ночные во время нормы часов: ${ночныеВоВремяНормыЧасов}`);\n\n  // Рассчитываем итоговую зарплату (дневные переработки + ночные переработки + 20% от суммы из второго массива + 100000)\n  const итоговаяЗП = дневныеПереработки + ночныеПереработки + ночныеВоВремяНормыЧасов + 100000;\n\n  // Округляем значения до целых чисел\n  const округленнаяДневныеПереработки = Math.round(дневныеПереработки);\n  const округленныеНочныеПереработки = Math.round(ночныеПереработки);\n  const округленныеНочныеВоВремяНормыЧасов = Math.round(ночныеВоВремяНормыЧасов);\n  const округленнаяИтоговаяЗП = Math.round(итоговаяЗП);\n\n  console.log(`Округленные дневные переработки: ${округленнаяДневныеПереработки}`);\n  console.log(`Округленные ночные переработки: ${округленныеНочныеПереработки}`);\n  console.log(`Округленные ночные во время нормы часов: ${округленныеНочныеВоВремяНормыЧасов}`);\n  console.log(`Округленная итоговая зарплата: ${округленнаяИтоговаяЗП}`);\n} else {\n  console.log('Не удалось достичь нормы часов.');\n}\n\n\n\n  \n  return (\n\n    <div className=\"App\">\n    <label>\n      Норма часов:\n      <input type=\"number\" value={нормаЧасов} onChange={(e) => handleInputChange(e, установитьНормуЧасов)} />\n    </label>\n\n    <label>\n      Оклад:\n      <input type=\"number\" value={оклад} onChange={(e) => handleInputChange(e, установитьОклад)} />\n    </label>\n\n    <label>\n      Массив данных 1:\n      <input type=\"text\" value={массив1.join(',')} onChange={(e) => handleInputChange(e, установитьМассив1)} />\n    </label>\n\n    <label>\n      Массив данных 2:\n      <input type=\"text\" value={массив2.join(',')} onChange={(e) => handleInputChange(e, установитьМассив2)} />\n    </label>\n\n    <button onClick={рассчитатьИтоговуюЗП}>Рассчитать</button>\n  </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}