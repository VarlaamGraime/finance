{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u0410\\u043B\\u0435\\u043A\\u0441\\u0430\\u043D\\u0434\\u0440\\\\Documents\\\\finance\\\\finance\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputValue1, setInputValue1] = useState('');\n  const [inputValue2, setInputValue2] = useState('');\n  const [dataArray, setDataArray] = useState([]);\n  const addToArray = () => {\n    // Проверка на пустые значения\n    if (inputValue1.trim() === '' || inputValue2.trim() === '') {\n      alert('Введите данные перед добавлением в массив.');\n      return;\n    }\n\n    // Создание нового массива, содержащего текущие значения из обоих инпутов\n    const newArray = [inputValue1, inputValue2];\n\n    // Добавление текущих значений в массив данных\n    setDataArray(newArray);\n\n    // Очистка инпутов после добавления в массив\n    setInputValue1('');\n    setInputValue2('');\n\n    // Вывод для демонстрации\n    console.log('Массив после добавления:', newArray);\n  };\n  function суммаДоЗначения(массив1, массив2, нормаЧасов) {\n    let общаяСумма = 0;\n    let достигнута = -1;\n    let суммаПервогоМассива = 0;\n    let суммаИзВторогоМассива = 0;\n    let maxLength = Math.min(массив1.length, массив2.length);\n    for (let i = 0; i < maxLength; i++) {\n      общаяСумма += массив1[i] + массив2[i];\n      суммаПервогоМассива += массив1[i];\n      суммаИзВторогоМассива += массив2[i];\n      if (общаяСумма >= нормаЧасов) {\n        достигнута = i + 1;\n        break;\n      }\n    }\n    const оставшаяСумма = общаяСумма - нормаЧасов;\n    return {\n      общаяСумма,\n      достигнута,\n      суммаПервогоМассива,\n      суммаИзВторогоМассива,\n      оставшаяСумма\n    };\n  }\n\n  // Ваши массивы данных\n  const массив1 = [9, 8, 8, 7, 4, 8, 12, 15, 4, 3, 9, 5, 4, 9, 9, 2, 7, 14, 8, 11, 3, 13, 12, 7, 9];\n  const массив2 = [6, 7, 7, 2, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 0, 7, 4, 7, 5, 6, 4, 6, 4, 6, 7];\n  const нормаЧасов = 167;\n  const суммаОклада = 100000;\n  const результат = суммаДоЗначения(массив1, массив2, нормаЧасов);\n  console.log(`Норма часов: ${нормаЧасов}`);\n  console.log(`Количество переработок: ${результат.общаяСумма}`);\n  if (результат.достигнута !== -1) {\n    console.log(`Достигнута норма часов: ${результат.достигнута}`);\n    console.log(`Дневные переработки (часов): ${результат.суммаПервогоМассива}`);\n    console.log(`Ночные переработки (часов): ${результат.суммаИзВторогоМассива}`);\n    console.log(`Оставшееся время: ${результат.оставшаяСумма}`);\n\n    // Рассчитываем цену за час\n    const ценаЗаЧас = суммаОклада / нормаЧасов;\n    console.log(`Цена за час: ${ценаЗаЧас}`);\n\n    // Рассчитываем цену переработки (умножаем цену за час на 1.5)\n    const ценаПереработки = ценаЗаЧас * 1.5;\n    console.log(`Цена переработки: ${ценаПереработки}`);\n\n    // Рассчитываем дневные переработки (умножаем цену переработки на дневные переработки и вычитаем 13%)\n    const дневныеПереработки = ценаПереработки * результат.суммаПервогоМассива * 0.87;\n    console.log(`Дневные переработки: ${дневныеПереработки}`);\n\n    // Рассчитываем ночные переработки (умножаем цену переработки на ночные переработки, прибавляем 20%, и вычитаем 13%)\n    const ночныеПереработки = ценаПереработки * (результат.суммаИзВторогоМассива * 1.2) * 0.87;\n    console.log(`Ночные переработки: ${ночныеПереработки}`);\n\n    // Рассчитываем величину 20% от суммы из второго массива до достижения нормы часов\n    const ночныеВоВремяНормыЧасов = результат.суммаИзВторогоМассива * ценаЗаЧас * 0.2;\n    console.log(`Ночные во время нормы часов: ${ночныеВоВремяНормыЧасов}`);\n\n    // Рассчитываем итоговую зарплату (дневные переработки + ночные переработки + 20% от суммы из второго массива + 100000)\n    const итоговаяЗП = дневныеПереработки + ночныеПереработки + ночныеВоВремяНормыЧасов + 100000;\n\n    // Округляем значения до целых чисел\n    const округленнаяДневныеПереработки = Math.round(дневныеПереработки);\n    const округленныеНочныеПереработки = Math.round(ночныеПереработки);\n    const округленныеНочныеВоВремяНормыЧасов = Math.round(ночныеВоВремяНормыЧасов);\n    const округленнаяИтоговаяЗП = Math.round(итоговаяЗП);\n    console.log(`Округленные дневные переработки: ${округленнаяДневныеПереработки}`);\n    console.log(`Округленные ночные переработки: ${округленныеНочныеПереработки}`);\n    console.log(`Округленные ночные во время нормы часов: ${округленныеНочныеВоВремяНормыЧасов}`);\n    console.log(`Округленная итоговая зарплата: ${округленнаяИтоговаяЗП}`);\n  } else {\n    console.log('Не удалось достичь нормы часов.');\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"\\u0443\\u043A\\u0430\\u0436\\u0438\\u0442\\u0435 \\u0434\\u043D\\u0435\\u0432\\u043D\\u044B\\u0435 \\u0447\\u0430\\u0441\\u044B \",\n      value: inputValue1,\n      onChange: e => setInputValue1(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 8\n    }, this), inputValue1, /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"\\u0443\\u043A\\u0430\\u0436\\u0438\\u0442\\u0435 \\u043D\\u043E\\u0447\\u043D\\u044B\\u0435 \\u0447\\u0430\\u0441\\u044B \",\n      value: inputValue2,\n      onChange: e => setInputValue2(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), inputValue2, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addToArray,\n      children: \"\\u0412\\u0432\\u043E\\u0434\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"8GZgHrIa8awP99+7iGcfqdvYmkk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","inputValue1","setInputValue1","inputValue2","setInputValue2","dataArray","setDataArray","addToArray","trim","alert","newArray","console","log","суммаДоЗначения","массив1","массив2","нормаЧасов","общаяСумма","достигнута","суммаПервогоМассива","суммаИзВторогоМассива","maxLength","Math","min","length","i","оставшаяСумма","суммаОклада","результат","ценаЗаЧас","ценаПереработки","дневныеПереработки","ночныеПереработки","ночныеВоВремяНормыЧасов","итоговаяЗП","округленнаяДневныеПереработки","round","округленныеНочныеПереработки","округленныеНочныеВоВремяНормыЧасов","округленнаяИтоговаяЗП","className","children","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Александр/Documents/finance/finance/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\n\nfunction App() {\n  const [inputValue1, setInputValue1] = useState('');\n  const [inputValue2, setInputValue2] = useState('');\n  const [dataArray, setDataArray] = useState([]);\n\n  const addToArray = () => {\n    // Проверка на пустые значения\n    if (inputValue1.trim() === '' || inputValue2.trim() === '') {\n      alert('Введите данные перед добавлением в массив.');\n      return;\n    }\n\n    // Создание нового массива, содержащего текущие значения из обоих инпутов\n    const newArray = [inputValue1, inputValue2];\n\n    // Добавление текущих значений в массив данных\n    setDataArray(newArray);\n\n    // Очистка инпутов после добавления в массив\n    setInputValue1('');\n    setInputValue2('');\n\n    // Вывод для демонстрации\n    console.log('Массив после добавления:', newArray);\n  };\nfunction суммаДоЗначения(массив1, массив2, нормаЧасов) {\n  let общаяСумма = 0;\n  let достигнута = -1;\n  let суммаПервогоМассива = 0;\n  let суммаИзВторогоМассива = 0;\n\n  let maxLength = Math.min(массив1.length, массив2.length);\n\n  for (let i = 0; i < maxLength; i++) {\n      общаяСумма += массив1[i] + массив2[i];\n      суммаПервогоМассива += массив1[i];\n      суммаИзВторогоМассива += массив2[i];\n\n      if (общаяСумма >= нормаЧасов) {\n          достигнута = i + 1;\n          break;\n      }\n  }\n\n  const оставшаяСумма = общаяСумма - нормаЧасов;\n\n  return {\n      общаяСумма,\n      достигнута,\n      суммаПервогоМассива,\n      суммаИзВторогоМассива,\n      оставшаяСумма\n  };\n}\n\n// Ваши массивы данных\nconst массив1 = [9, 8, 8, 7, 4, 8, 12, 15, 4, 3, 9, 5, 4, 9, 9, 2, 7, 14, 8, 11, 3, 13, 12, 7, 9];\nconst массив2 = [6, 7, 7, 2, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 0, 7, 4, 7, 5, 6, 4, 6, 4, 6, 7];\n\nconst нормаЧасов = 167;\n\nconst суммаОклада = 100000;\n\n\nconst результат = суммаДоЗначения(массив1, массив2, нормаЧасов);\n\nconsole.log(`Норма часов: ${нормаЧасов}`);\nconsole.log(`Количество переработок: ${результат.общаяСумма}`);\n\nif (результат.достигнута !== -1) {\n  console.log(`Достигнута норма часов: ${результат.достигнута}`);\n  console.log(`Дневные переработки (часов): ${результат.суммаПервогоМассива}`);\n  console.log(`Ночные переработки (часов): ${результат.суммаИзВторогоМассива}`);\n  console.log(`Оставшееся время: ${результат.оставшаяСумма}`);\n\n  // Рассчитываем цену за час\n  const ценаЗаЧас = суммаОклада / нормаЧасов;\n  console.log(`Цена за час: ${ценаЗаЧас}`);\n\n  // Рассчитываем цену переработки (умножаем цену за час на 1.5)\n  const ценаПереработки = ценаЗаЧас * 1.5;\n  console.log(`Цена переработки: ${ценаПереработки}`);\n\n  // Рассчитываем дневные переработки (умножаем цену переработки на дневные переработки и вычитаем 13%)\n  const дневныеПереработки = ценаПереработки * результат.суммаПервогоМассива * 0.87;\n  console.log(`Дневные переработки: ${дневныеПереработки}`);\n\n  // Рассчитываем ночные переработки (умножаем цену переработки на ночные переработки, прибавляем 20%, и вычитаем 13%)\n  const ночныеПереработки = ценаПереработки * (результат.суммаИзВторогоМассива * 1.2) * 0.87;\n  console.log(`Ночные переработки: ${ночныеПереработки}`);\n\n  // Рассчитываем величину 20% от суммы из второго массива до достижения нормы часов\n  const ночныеВоВремяНормыЧасов = результат.суммаИзВторогоМассива * ценаЗаЧас * 0.2;\n  console.log(`Ночные во время нормы часов: ${ночныеВоВремяНормыЧасов}`);\n\n  // Рассчитываем итоговую зарплату (дневные переработки + ночные переработки + 20% от суммы из второго массива + 100000)\n  const итоговаяЗП = дневныеПереработки + ночныеПереработки + ночныеВоВремяНормыЧасов + 100000;\n\n  // Округляем значения до целых чисел\n  const округленнаяДневныеПереработки = Math.round(дневныеПереработки);\n  const округленныеНочныеПереработки = Math.round(ночныеПереработки);\n  const округленныеНочныеВоВремяНормыЧасов = Math.round(ночныеВоВремяНормыЧасов);\n  const округленнаяИтоговаяЗП = Math.round(итоговаяЗП);\n\n  console.log(`Округленные дневные переработки: ${округленнаяДневныеПереработки}`);\n  console.log(`Округленные ночные переработки: ${округленныеНочныеПереработки}`);\n  console.log(`Округленные ночные во время нормы часов: ${округленныеНочныеВоВремяНормыЧасов}`);\n  console.log(`Округленная итоговая зарплата: ${округленнаяИтоговаяЗП}`);\n} else {\n  console.log('Не удалось достичь нормы часов.');\n}\n\n\n\n  \n  return (\n    <div className=\"App\">\n       <input\n        placeholder=\"укажите дневные часы \"\n        value={inputValue1}\n        onChange={(e) => setInputValue1(e.target.value)}\n      />\n      {inputValue1}\n      <input\n        placeholder=\"укажите ночные часы \"\n        value={inputValue2}\n        onChange={(e) => setInputValue2(e.target.value)}\n      />\n      {inputValue2}\n      <button onClick={addToArray}>Ввод</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGxC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMW,UAAU,GAAGA,CAAA,KAAM;IACvB;IACA,IAAIN,WAAW,CAACO,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIL,WAAW,CAACK,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC1DC,KAAK,CAAC,4CAA4C,CAAC;MACnD;IACF;;IAEA;IACA,MAAMC,QAAQ,GAAG,CAACT,WAAW,EAAEE,WAAW,CAAC;;IAE3C;IACAG,YAAY,CAACI,QAAQ,CAAC;;IAEtB;IACAR,cAAc,CAAC,EAAE,CAAC;IAClBE,cAAc,CAAC,EAAE,CAAC;;IAElB;IACAO,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,QAAQ,CAAC;EACnD,CAAC;EACH,SAASG,eAAeA,CAACC,OAAO,EAAEC,OAAO,EAAEC,UAAU,EAAE;IACrD,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,UAAU,GAAG,CAAC,CAAC;IACnB,IAAIC,mBAAmB,GAAG,CAAC;IAC3B,IAAIC,qBAAqB,GAAG,CAAC;IAE7B,IAAIC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACT,OAAO,CAACU,MAAM,EAAET,OAAO,CAACS,MAAM,CAAC;IAExD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,SAAS,EAAEI,CAAC,EAAE,EAAE;MAChCR,UAAU,IAAIH,OAAO,CAACW,CAAC,CAAC,GAAGV,OAAO,CAACU,CAAC,CAAC;MACrCN,mBAAmB,IAAIL,OAAO,CAACW,CAAC,CAAC;MACjCL,qBAAqB,IAAIL,OAAO,CAACU,CAAC,CAAC;MAEnC,IAAIR,UAAU,IAAID,UAAU,EAAE;QAC1BE,UAAU,GAAGO,CAAC,GAAG,CAAC;QAClB;MACJ;IACJ;IAEA,MAAMC,aAAa,GAAGT,UAAU,GAAGD,UAAU;IAE7C,OAAO;MACHC,UAAU;MACVC,UAAU;MACVC,mBAAmB;MACnBC,qBAAqB;MACrBM;IACJ,CAAC;EACH;;EAEA;EACA,MAAMZ,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;EACjG,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAE3F,MAAMC,UAAU,GAAG,GAAG;EAEtB,MAAMW,WAAW,GAAG,MAAM;EAG1B,MAAMC,SAAS,GAAGf,eAAe,CAACC,OAAO,EAAEC,OAAO,EAAEC,UAAU,CAAC;EAE/DL,OAAO,CAACC,GAAG,CAAE,gBAAeI,UAAW,EAAC,CAAC;EACzCL,OAAO,CAACC,GAAG,CAAE,2BAA0BgB,SAAS,CAACX,UAAW,EAAC,CAAC;EAE9D,IAAIW,SAAS,CAACV,UAAU,KAAK,CAAC,CAAC,EAAE;IAC/BP,OAAO,CAACC,GAAG,CAAE,2BAA0BgB,SAAS,CAACV,UAAW,EAAC,CAAC;IAC9DP,OAAO,CAACC,GAAG,CAAE,gCAA+BgB,SAAS,CAACT,mBAAoB,EAAC,CAAC;IAC5ER,OAAO,CAACC,GAAG,CAAE,+BAA8BgB,SAAS,CAACR,qBAAsB,EAAC,CAAC;IAC7ET,OAAO,CAACC,GAAG,CAAE,qBAAoBgB,SAAS,CAACF,aAAc,EAAC,CAAC;;IAE3D;IACA,MAAMG,SAAS,GAAGF,WAAW,GAAGX,UAAU;IAC1CL,OAAO,CAACC,GAAG,CAAE,gBAAeiB,SAAU,EAAC,CAAC;;IAExC;IACA,MAAMC,eAAe,GAAGD,SAAS,GAAG,GAAG;IACvClB,OAAO,CAACC,GAAG,CAAE,qBAAoBkB,eAAgB,EAAC,CAAC;;IAEnD;IACA,MAAMC,kBAAkB,GAAGD,eAAe,GAAGF,SAAS,CAACT,mBAAmB,GAAG,IAAI;IACjFR,OAAO,CAACC,GAAG,CAAE,wBAAuBmB,kBAAmB,EAAC,CAAC;;IAEzD;IACA,MAAMC,iBAAiB,GAAGF,eAAe,IAAIF,SAAS,CAACR,qBAAqB,GAAG,GAAG,CAAC,GAAG,IAAI;IAC1FT,OAAO,CAACC,GAAG,CAAE,uBAAsBoB,iBAAkB,EAAC,CAAC;;IAEvD;IACA,MAAMC,uBAAuB,GAAGL,SAAS,CAACR,qBAAqB,GAAGS,SAAS,GAAG,GAAG;IACjFlB,OAAO,CAACC,GAAG,CAAE,gCAA+BqB,uBAAwB,EAAC,CAAC;;IAEtE;IACA,MAAMC,UAAU,GAAGH,kBAAkB,GAAGC,iBAAiB,GAAGC,uBAAuB,GAAG,MAAM;;IAE5F;IACA,MAAME,6BAA6B,GAAGb,IAAI,CAACc,KAAK,CAACL,kBAAkB,CAAC;IACpE,MAAMM,4BAA4B,GAAGf,IAAI,CAACc,KAAK,CAACJ,iBAAiB,CAAC;IAClE,MAAMM,kCAAkC,GAAGhB,IAAI,CAACc,KAAK,CAACH,uBAAuB,CAAC;IAC9E,MAAMM,qBAAqB,GAAGjB,IAAI,CAACc,KAAK,CAACF,UAAU,CAAC;IAEpDvB,OAAO,CAACC,GAAG,CAAE,oCAAmCuB,6BAA8B,EAAC,CAAC;IAChFxB,OAAO,CAACC,GAAG,CAAE,mCAAkCyB,4BAA6B,EAAC,CAAC;IAC9E1B,OAAO,CAACC,GAAG,CAAE,4CAA2C0B,kCAAmC,EAAC,CAAC;IAC7F3B,OAAO,CAACC,GAAG,CAAE,kCAAiC2B,qBAAsB,EAAC,CAAC;EACxE,CAAC,MAAM;IACL5B,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;EAChD;EAKE,oBACEd,OAAA;IAAK0C,SAAS,EAAC,KAAK;IAAAC,QAAA,gBACjB3C,OAAA;MACC4C,WAAW,EAAC,iHAAuB;MACnCC,KAAK,EAAE1C,WAAY;MACnB2C,QAAQ,EAAGC,CAAC,IAAK3C,cAAc,CAAC2C,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAAC,EACDjD,WAAW,eACZH,OAAA;MACE4C,WAAW,EAAC,2GAAsB;MAClCC,KAAK,EAAExC,WAAY;MACnByC,QAAQ,EAAGC,CAAC,IAAKzC,cAAc,CAACyC,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAAC,EACD/C,WAAW,eACZL,OAAA;MAAQqD,OAAO,EAAE5C,UAAW;MAAAkC,QAAA,EAAC;IAAI;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEV;AAAClD,EAAA,CApIQD,GAAG;AAAAqD,EAAA,GAAHrD,GAAG;AAsIZ,eAAeA,GAAG;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}